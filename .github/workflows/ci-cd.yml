name: CI/CD Pipeline

on:
  push:
    branches:
      - main  

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE_BACKEND: sarang033/expense-backend  
      DOCKER_IMAGE_FRONTEND: sarang033/expense-frontend  # Replace with your Docker Hub username and frontend image name
      EC2_HOST: ${{ secrets.EC2_HOST }}  # Use secret for EC2 instance public IP address
      EC2_USER: ${{ secrets.EC2_USER }}  # Use secret for EC2 username

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker Buildx for cross-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push backend Docker image
      - name: Build and push backend image
        run: |
          docker build -t $DOCKER_IMAGE_BACKEND \
            --build-arg MONGO_URI=${{ secrets.MONGO_URI }} \
            --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -f backend/Dockerfile ./backend
          docker push $DOCKER_IMAGE_BACKEND

      # Build and push frontend Docker image
      - name: Build and push frontend image
        run: |
          docker build -t $DOCKER_IMAGE_FRONTEND \
            -f frontend/Dockerfile ./frontend
          docker push $DOCKER_IMAGE_FRONTEND

      # SSH into EC2 and deploy
      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}  # Use secret for EC2 host
          username: ${{ secrets.EC2_USER }}  # Use secret for EC2 username
          key: ${{ secrets.EC2_SSH_KEY }}  # SSH key for authentication
          script: |
            # Pull the latest Docker images
            docker pull $DOCKER_IMAGE_BACKEND
            docker pull $DOCKER_IMAGE_FRONTEND
            
            # Stop and remove existing containers
            docker-compose -f /path/to/docker-compose.yml down
            
            # Start new containers
            docker-compose -f /path/to/docker-compose.yml up -d
